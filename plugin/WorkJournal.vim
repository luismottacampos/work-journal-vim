" **************************************************
" Date Generation Functions
" **************************************************

" Simple days-to-seconds conversion function
function! WorkJournal#DaysToSeconds( days )
        return 86400 * a:days 
endfunction

" Returns the unixtimestamp of a day <days_ago> from now
function! WorkJournal#GetUnixTimeFrom( days_ago )
        return localtime() - WorkJournal#DaysToSeconds( a:days_ago )
endfunction

" Produces a dictionary with keys "year", "month", "day", "week", maybe for
" <days_ago> days in the past.
function! WorkJournal#GetDateAsDictionary( days_ago )
        let tmp_date = split( strftime( '%Y %m %d %W', WorkJournal#GetUnixTimeFrom( a:days_ago ) ) )
        " To make week match iCal's weeks, we need to add one.
        let date = { 'year': tmp_date[0], 'month': tmp_date[1], 'day': tmp_date[2], 'week': 1 + tmp_date[3] }
        return date
endfunction

" **************************************************
" File Reading Functions
" **************************************************

" WorkJournal#FileNameForDate( date, file_type )
" a:date is a hash like the ones generated by WorkJournal#GetDateAsDictionary.
" a:file_type is the extension desired for the file without the dot.
function! WorkJournal#FileNameForDate( date, file_type )
        let file_format = '%s/%04d/%02d/%04d%02d%02d.%s'
        let filename = printf( file_format, g:work_journal_work_dir, a:date['year'], a:date['month'], a:date['year'], a:date['month'], a:date['day'], a:file_type )
        return simplify( filename )
endfunction

" WorkJournal#ReportFileNameForDate( date )
" Returns filenames for Report files
function! WorkJournal#ReportFileNameForDate( date )
	return WorkJournal#FileNameForDate( a:date, 'report' )
endfunction

" WorkJournal#PPPFileNameForDate( date )
" Returns filenames for PPP files
function! WorkJournal#PPPFileNameForDate( date )
	return WorkJournal#FileNameForDate( a:date, 'ppp' )
endfunction

" WorkJournal#ReadEntriesMatching( pattern )
function! WorkJournal#ReadEntriesMatching( filename, pattern )
        let entries = []
        if filereadable( a:filename )
                for line in readfile( a:filename )
                        if line =~ a:pattern
                                call add( entries, line )
                        endif
                endfor
        endif
        return entries
endfunction

" WorkJournal#ReadLogEntriesFromFile( filename )
function! WorkJournal#ReadLogEntriesFromFile( filename )
        return WorkJournal#ReadEntriesMatching( a:filename, '^\* ' )
endfunction

" WorkJournal#ReadToDoEntriesFromFile( filename )
function! WorkJournal#ReadToDoEntriesFromFile( filename )
        return WorkJournal#ReadEntriesMatching( a:filename, '\(TODO\)' )
endfunction

" GetLogEntriesFrom( days_ago )
function! WorkJournal#GetLogEntriesFrom( days_ago )
        if ! a:days_ago
                let a:days_ago = 0
        endif
        return WorkJournal#ReadLogEntriesFromFile( WorkJournal#ReportFileNameForDate( WorkJournal#GetDateAsDictionary( a:days_ago ) ) )
endfunction

" GetToDoEntriesFrom( days_ago )
function! WorkJournal#GetToDoEntriesFrom( days_ago )
        return WorkJournal#ReadToDoEntriesFromFile( WorkJournal#ReportFileNameForDate( WorkJournal#GetDateAsDictionary( a:days_ago ? a:days_ago : 0 ) ) )
endfunction

" **************************************************
" Report-Generation Functions
" **************************************************
function! WorkJournal#GetStatusReportHeader ( cityString, countryString )
	let l:date = WorkJournal#GetDateAsDictionary( 0 )
	let l:headerTemplate = 'Status Report %04d-%02d-%02d (%s, %s)'
	return printf( l:headerTemplate, l:date['year'], l:date['month'], l:date['day'], a:cityString, a:countryString )
endfunction

" PPPHeader()
function! WorkJournal#PPPHeader()
        return strftime( 'PPP Week %V' )
endfunction

function! WorkJournal#GetPPPLogEntries()
        let entries = []
        for day in [ 7, 6, 5, 4, 3, 2, 1 ]
              call extend( entries, WorkJournal#GetLogEntriesFrom( day ) )
        endfor
        return entries
endfunction

" GetPPPToDoItems()
function! WorkJournal#GetPPPToDoItems()
        let entries = []
        for day in [ 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3 ]
                call extend( entries, WorkJournal#GetToDoEntriesFrom( day ) )
        endfor
        return entries
endfunction

" PPP() (the main function)
function! WorkJournal#PPP()
        let report = []
        call add( report, WorkJournal#PPPHeader() )
        call add( report, '' )
        call add( report, 'Progress' )
        call extend( report, WorkJournal#GetPPPLogEntries() )
        call add( report, '' )
        call add( report, 'Problems' )
        call add( report, '' )
        call add( report, 'Plans' )
        call extend( report, WorkJournal#GetPPPToDoItems() )
        return report
endfunction

" **************************************************
" BuildPPPReport()
" Build a PPP Report on a new buffer
" **************************************************
function! WorkJournal#BuildPPPReport()
	call append( 0, WorkJournal#PPP() )
endfunction

function! WorkJournal#GetStatusReportHeader ( cityString, countryString )
	let l:date = WorkJournal#GetDateAsDictionary( 0 )
	let l:headerTemplate = 'Activity Report %04d-%02d-%02d (%s, %s)'
	return printf( l:headerTemplate, l:date['year'], l:date['month'], l:date['day'], a:cityString, a:countryString )
endfunction

function! WorkJournal#AddStatusReportHeader( cityString, countryString )
	let failed = append( 0, WorkJournal#GetStatusReportHeader( a:cityString, a:countryString ) )
endfunction

" Opens Today's Status Report
function! WorkJournal#CreateOrOpenCurrentStatusReport()
    let l:dirname = g:work_journal_work_dir . strftime( '/%Y/%m/', localtime() )
    let l:filename = l:dirname . strftime( '%Y%m%d.report', localtime() )

    if exists("*mkdir")
        if ! isdirectory( l:dirname )
            call mkdir( l:dirname, 'p' )
        endif
    endif
    execute 'edit! ' . l:filename
    call WorkJournal#AddStatusReportHeader('Toronto', 'CA')
endfunction

" This file is part of the Work Journal VIM Extension
" 
" The Work Journal VIM Extension is free software: you can redistribute it
" and/or modify it under the terms of the GNU General Public License as
" published by the Free Software Foundation, either version 3 of the License,
" or (at your option) any later version.
" 
" The Work Journal VIM Extension is distributed in the hope that it will be
" useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
" Public License for more details.
" 
" You should have received a copy of the GNU General Public License along with
" the Work Journal VIM Extension.  If not, see <http://www.gnu.org/licenses/>.
"
" Auto-Loaded Status Report Utility functions
"
